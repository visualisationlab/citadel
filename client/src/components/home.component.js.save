import React, { Component } from "react";

import UserService from "../services/user.service";

import ForceGraph from "./graph.component";

import * as jsnx from "jsnetworkx";

import * as d3 from "d3";


export default class Home extends Component {
  constructor(props) {
    super(props);

    console.log(d3.drag().touchable(navigator.maxTouchPoints));
    this.width = 1890
    this.height = 880

    this.state = {
      content: "",
      data: null,
      links: [],
      charge: -400,
      selectedNode: -1,
      highlightedNodes: [],
      nx: null,
      selectionType: "neighbors",
      shortestpath_node0: -1,
      shortestpath_node1: -1,
      message: "",
      graphList: [],
      selectedGraph: "",
      nodeInfo: []
    };

    this.removeNode = this.removeNode.bind(this)
  }

  componentDidMount() {
    UserService.getPublicContent().then(
      response => {
        this.setState({
          content: response.data
        });
      },
      error => {
        this.setState({
          content:
            (error.response && error.response.data) ||
            error.message ||
            error.toString()
        });
      }
    )

    UserService.getGraphs().then(
      response => {
        this.setState({
          graphList: response.data
        });
      }
    );
    }

    removeNode(node) {
      var newData = {...this.state.data};

      console.log(Object.keys(newData).length)
      console.log(node.id)

      delete newData[node.id];

      console.log(Object.keys(newData).length)

      console.log(this.state.links.length)
      var links = this.state.links.filter((link) => {
        console.log(link.source.id, link.target.id)

        return (link.source.id !== node.id && link.target.id !== node.id)
      });

      console.log(links.length)


      // console.log("g nodes", G.numberOfNodes(true))

      // links.forEach(element => {
      //   G.addEdge(element.source, element.target);
      // });

      this.setState({
        data: newData,
        links: links,
        message: "Deleted node " + node.id
      });
    }

    render() {
        return (
            <div className="container">
                <header className="jumbotron">
                    <input
                        type="range"
                        min="-400"
                        max="400"
                        step="1"
                        value={this.state.charge}
                        onChange={(e) => this.setState({
                            charge: e.target.value})
                        }
                    />
                    <select value={this.state.selectedGraph}
                      onChange={(e) => {
                        UserService.getGraph(e.target.value).then(
                          response => {
                            let graph = response.data

                            var nodes = {}

                            graph.nodes.forEach((n) => {
                              nodes[n.id] = { id: n.id, r: 5, name: n.n1}
                            });

                            let nodeInfo = {};

                            graph.nodes.forEach((n) => {
                              nodeInfo[n.id] = n.attributes
                            });

                            var links = graph.edges.map((edge) => {
                              return {"source": edge.source, "target": edge.target};
                            });

                            var G = new jsnx.Graph();

                            Object.keys(nodes).forEach((key) => {
                              return G.addNode(nodes[key].id, {"name": nodes[key].n1})
                            })

                            console.log("g nodes", G.numberOfNodes(true))

                            links.forEach(element => {
                              G.addEdge(element.source, element.target);
                            });

                            console.log(response);

                            this.setState({
                              selectedNode: "",
                              highlightedNodes: [],
                              shortestpath_node0: -1,
                              shortestpath_node1: -1,
                              message: "",
                              selectedGraph: e.target.value,
                              data: nodes,
                              links: links,
                              nx: G,
                              nodeInfo: nodeInfo})
                            },
                            error => {
                              this.setState({
                                content:
                                  (error.response && error.response.data) ||
                                  error.message ||
                                  error.toString()
                              });
                          }
                      );


                      }}>
                      {this.state.graphList.map((item) => {
                        return (
                          <option value={item}>{item}</option>
                        )
                      })}
                    </select>
                    <select value={this.state.selectionType}
                        onChange={(e) => this.setState({
                            selectedNode: "",
                            highlightedNodes: [],
                            selectionType: e.target.value,
                            shortestpath_node0: -1,
                            shortestpath_node1: -1,
                            message: ""
                        })}>
                        <option value="neighbors">Neighbors</option>
                        <option value="shortestpath">Shortest path</option>
                        <option value="group">Group</option>
                        <option value="delete">Delete</option>
                    </select>
                    {this.state.data !== null &&
                    <div style={{zIndex:-100}}>
                      <svg width={this.width} height={this.height} >
                          <ForceGraph nodes={this.state.data} charge={this.state.charge} parent={this}
                              edges={this.state.links} width={this.width} height={this.height} removeNode={this.removeNode}/>
                      </svg>
                      <p>{this.state.message !== "" ? this.state.message : "no message"}</p>
                      {/* <p>Size of largest clique: {jsnx.graphCliqueNumber(this.state.nx)}</p> */}
                      {/* <p>Number of nodes: {jsnx.numberOfNodes(this.state.nx)}</p>
                      <p>Number of edges: {jsnx.numberOfEdges(this.state.nx)}</p> */}
                      <table>

                      {this.state.selectedNode !== "" ? Object.keys(this.state.nodeInfo[this.state.selectedNode]).map((key) => {
                        return <tr><td>{key}</td><td>{this.state.nodeInfo[this.state.selectedNode][key]}</td></tr>
                      }): <tr><td>no node selected</td></tr>}
                      </table>
                    </div>
                    }
                    <script>
                    {/* {f()} */}
                    </script>
                </header>
            </div>
        );
    }
}
